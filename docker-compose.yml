version: "3.6"
services:
  postgres:
    image: postgres:11-beta4-alpine
    volumes:
      - ./docker/postgres/init_test_db.sql:/docker/entrypoint-initdb.d/init_test.db.sql
      - ./storage/postgres:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: analytics
      POSTGRES_PASSWORD: analytics
      POSTGRES_DB: analytics

  redis:
    image: redis:alpine
    volumes:
      - ./storage/redis:/data
    ports:
      - 6379:6379

#  nginx:
#    image: nginx:mainline-alpine
#    volumes:
#      - ./:/var/www/analytics/backend
#      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
#      - ./storage/logs:/var/log/nginx
#    ports:
#      - 80:80
#    depends_on:
#      - php

  php:
    build: ./docker/php
    volumes:
    - .:/var/www/analytics/backend
    ports:
      - 80:80
    working_dir: /var/www/analytics/backend

  rabbitmq:
    image: rabbitmq:3.7.7-management-alpine
    volumes:
      - ./docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./storage/rabbitmq:/var/lib/rabbitmq/mnesia
    ports:
      - 15672:15672
      - 5672:5672

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.3.2
    environment:
      - discovery.type=single-node
      - cluster.name=analytics-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./storage/elasticsearch:/usr/share/elasticsearch/data
    ports:
      - 9200:9200

  influxdb:
    image: influxdb:1.6-alpine
    volumes:
      - ./storage/influxdb:/var/lib/influxdb
      - ./docker/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf
    ports:
      - 8086:8086
      - 8083:8083
    environment:
      INFLUXDB_DB: analytics
      INFLUXDB_ADMIN_USER: 'admin'
      INFLUXDB_ADMIN_PASSWORD: 'analytics'
      INFLUXDB_USER: 'analytics'
      INFLUXDB_USER_PASSWORD: 'analytics'

  sentry:
    image: sentry
    links:
      - redis
      - postgres
    ports:
      - 9999:9000
    environment:
      SENTRY_SECRET_KEY: 'QRfG0Kx8T45l0CB2bRz1EkzQTyIg3LMc'
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: analytics
      SENTRY_DB_PASSWORD: analytics
      SENTRY_REDIS_HOST: redis

  cron:
    image: sentry
    links:
      - redis
      - postgres
    command: 'sentry run cron'
    environment:
      SENTRY_SECRET_KEY: 'QRfG0Kx8T45l0CB2bRz1EkzQTyIg3LMc'
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: analytics
      SENTRY_DB_PASSWORD: analytics
      SENTRY_REDIS_HOST: redis

  worker:
    image: sentry
    links:
    - redis
    - postgres
    command: 'sentry run worker'
    environment:
      SENTRY_SECRET_KEY: 'QRfG0Kx8T45l0CB2bRz1EkzQTyIg3LMc'
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: analytics
      SENTRY_DB_PASSWORD: analytics
      SENTRY_REDIS_HOST: redis

  chronograf:
    image: chronograf:alpine
    ports:
      - 8888:8888
    links:
      - influxdb

  adminer:
    image: adminer:latest
    ports:
      - 8080:8080
    links:
      - postgres

  composer:
    build: ./docker/composer
    command: install
    volumes:
    - .:/app

#  phpunit:
#    build: ./docker/php
#    command: vendor/bin/phpunit
#    volumes:
#    - .:/var/www/analytics/backend
#    links:
#      - postgres
#      - elasticsearch

  teamcity-server:
    image: jetbrains/teamcity-server
    ports:
      - "8112:8111"
    volumes:
      - ./storage/teamcity/data_dir:/data/teamcity_server/datadir
      - ./storage/teamcity/log_dir:/opt/teamcity/logs
  teamcity-agent:
    image: jetbrains/teamcity-agent
    environment:
      - SERVER_URL=http://teamcity-server:8111
      - AGENT_NAME=regular_agent
  teamcity-minimal-agent:
    image: jetbrains/teamcity-minimal-agent
    environment:
      - SERVER_URL=http://teamcity-server:8111
      - AGENT_NAME=minimal_agent